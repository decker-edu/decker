"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MathJaxFiraFont = void 0;
var FontData_js_1 = require("@mathjax/src/cjs/output/svg/FontData.js");
var common_js_1 = require("./common.js");
var normal_js_1 = require("./svg/normal.js");
var bold_js_1 = require("./svg/bold.js");
var italic_js_1 = require("./svg/italic.js");
var bold_italic_js_1 = require("./svg/bold-italic.js");
var sans_serif_italic_js_1 = require("./svg/sans-serif-italic.js");
var sans_serif_bold_italic_js_1 = require("./svg/sans-serif-bold-italic.js");
var monospace_js_1 = require("./svg/monospace.js");
var smallop_js_1 = require("./svg/smallop.js");
var largeop_js_1 = require("./svg/largeop.js");
var size3_js_1 = require("./svg/size3.js");
var size4_js_1 = require("./svg/size4.js");
var size5_js_1 = require("./svg/size5.js");
var size6_js_1 = require("./svg/size6.js");
var size7_js_1 = require("./svg/size7.js");
var size8_js_1 = require("./svg/size8.js");
var size9_js_1 = require("./svg/size9.js");
var size10_js_1 = require("./svg/size10.js");
var size11_js_1 = require("./svg/size11.js");
var size12_js_1 = require("./svg/size12.js");
var size13_js_1 = require("./svg/size13.js");
var size14_js_1 = require("./svg/size14.js");
var size15_js_1 = require("./svg/size15.js");
var tex_variant_js_1 = require("./svg/tex-variant.js");
var tex_mathit_js_1 = require("./svg/tex-mathit.js");
var tex_oldstyle_js_1 = require("./svg/tex-oldstyle.js");
var tex_oldstyle_bold_js_1 = require("./svg/tex-oldstyle-bold.js");
var tex_calligraphic_js_1 = require("./svg/tex-calligraphic.js");
var tex_calligraphic_bold_js_1 = require("./svg/tex-calligraphic-bold.js");
var lf_tp_js_1 = require("./svg/lf-tp.js");
var rt_bt_js_1 = require("./svg/rt-bt.js");
var ext_js_1 = require("./svg/ext.js");
var mid_js_1 = require("./svg/mid.js");
var up_js_1 = require("./svg/up.js");
var dup_js_1 = require("./svg/dup.js");
var delimiters_js_1 = require("./svg/delimiters.js");
var Base = (0, common_js_1.CommonMathJaxFiraFontMixin)(FontData_js_1.SvgFontData);
var MathJaxFiraFont = (function (_super) {
    __extends(MathJaxFiraFont, _super);
    function MathJaxFiraFont(options) {
        var e_1, _a;
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, options) || this;
        var CLASS = _this.constructor;
        try {
            for (var _b = __values(Object.keys(_this.variant)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var variant = _c.value;
                _this.variant[variant].cacheID = 'FIRA-' + (CLASS.variantCacheIds[variant] || 'N');
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return _this;
    }
    MathJaxFiraFont.NAME = 'MathJaxFira';
    MathJaxFiraFont.OPTIONS = __assign(__assign({}, Base.OPTIONS), { dynamicPrefix: '@mathjax/mathjax-fira-font/svg/dynamic' });
    MathJaxFiraFont.defaultDelimiters = delimiters_js_1.delimiters;
    MathJaxFiraFont.defaultChars = {
        'normal': normal_js_1.normal,
        'bold': bold_js_1.bold,
        'italic': italic_js_1.italic,
        'bold-italic': bold_italic_js_1.boldItalic,
        'sans-serif-italic': sans_serif_italic_js_1.sansSerifItalic,
        'sans-serif-bold-italic': sans_serif_bold_italic_js_1.sansSerifBoldItalic,
        'monospace': monospace_js_1.monospace,
        '-smallop': smallop_js_1.smallop,
        '-largeop': largeop_js_1.largeop,
        '-size3': size3_js_1.size3,
        '-size4': size4_js_1.size4,
        '-size5': size5_js_1.size5,
        '-size6': size6_js_1.size6,
        '-size7': size7_js_1.size7,
        '-size8': size8_js_1.size8,
        '-size9': size9_js_1.size9,
        '-size10': size10_js_1.size10,
        '-size11': size11_js_1.size11,
        '-size12': size12_js_1.size12,
        '-size13': size13_js_1.size13,
        '-size14': size14_js_1.size14,
        '-size15': size15_js_1.size15,
        '-tex-variant': tex_variant_js_1.texVariant,
        '-tex-mathit': tex_mathit_js_1.texMathit,
        '-tex-oldstyle': tex_oldstyle_js_1.texOldstyle,
        '-tex-bold-oldstyle': tex_oldstyle_bold_js_1.texOldstyleBold,
        '-tex-calligraphic': tex_calligraphic_js_1.texCalligraphic,
        '-tex-bold-calligraphic': tex_calligraphic_bold_js_1.texCalligraphicBold,
        '-lf-tp': lf_tp_js_1.lfTp,
        '-rt-bt': rt_bt_js_1.rtBt,
        '-ext': ext_js_1.ext,
        '-mid': mid_js_1.mid,
        '-up': up_js_1.up,
        '-dup': dup_js_1.dup
    };
    MathJaxFiraFont.dynamicFiles = FontData_js_1.SvgFontData.defineDynamicFiles([
        ['latin', {
                'normal': [
                    [0x2C64, 0x2C66], 0x2C6D, [0x2C71, 0x2C73], [0xC0, 0xD6], [0xD8, 0xEF], [0xF1, 0xF6], [0xF8, 0x130], [0x132, 0x1AC], [0xA789, 0xA78D], 0x1AD, 0xA7AA, 0xA7AD, 0xA7AE, [0xA7B2, 0xA7B7], [0x1AE, 0x1B6], 0xAB53, [0x1B7, 0x236], [0x238, 0x24F], [0x1E02, 0x1E05], [0x1E0A, 0x1E0F], 0x1E12, 0x1E13, 0x1E1E, 0x1E1F, 0x1E24, 0x1E25, 0x1E2E, 0x1E2F, 0x1E36, 0x1E37, [0x1E3C, 0x1E41], [0x1E44, 0x1E47], [0x1E4A, 0x1E4D], [0x1E50, 0x1E57], 0x1E5A, 0x1E5B, [0x1E60, 0x1E63], [0x1E6A, 0x1E71], 0x1E78, 0x1E79, [0x1E80, 0x1E85], 0x1E92, 0x1E93, 0x1E9E, [0x1EA0, 0x1EF9]
                ]
            }],
        ['latin-b', {
                'bold': [
                    [0x2C64, 0x2C66], 0x2C6D, [0x2C71, 0x2C73], [0xC0, 0xD6], [0xD8, 0xEF], [0xF1, 0xF6], [0xF8, 0x130], [0x132, 0x236], [0x238, 0x24F], [0x1E02, 0x1E05], [0x1E0A, 0x1E0F], 0x1E12, 0x1E13, 0x1E1E, 0x1E1F, 0x1E24, 0x1E25, 0x1E2E, 0x1E2F, 0x1E36, 0x1E37, [0x1E3C, 0x1E41], [0x1E44, 0x1E47], [0x1E4A, 0x1E4D], [0x1E50, 0x1E57], 0x1E5A, 0x1E5B, [0x1E60, 0x1E63], [0x1E6A, 0x1E71], 0x1E78, 0x1E79, [0x1E80, 0x1E85], 0x1E92, 0x1E93, 0x1E9E, [0x1EA0, 0x1EF9]
                ]
            }],
        ['latin-i', {
                'italic': [
                    [0x2C64, 0x2C66], 0x2C6D, [0x2C71, 0x2C73], [0xC0, 0xD6], [0xD8, 0xEF], [0xF1, 0xF6], [0xF8, 0x130], [0x132, 0x236], [0x238, 0x24F], [0x1E02, 0x1E05], [0x1E0A, 0x1E0F], 0x1E12, 0x1E13, 0x1E1E, 0x1E1F, 0x1E24, 0x1E25, 0x1E2E, 0x1E2F, 0x1E36, 0x1E37, [0x1E3C, 0x1E41], [0x1E44, 0x1E47], [0x1E4A, 0x1E4D], [0x1E50, 0x1E57], 0x1E5A, 0x1E5B, [0x1E60, 0x1E63], [0x1E6A, 0x1E71], 0x1E78, 0x1E79, [0x1E80, 0x1E85], 0x1E92, 0x1E93, 0x1E9E, [0x1EA0, 0x1EF9]
                ]
            }],
        ['latin-bi', {
                'bold-italic': [
                    [0x2C64, 0x2C66], 0x2C6D, [0x2C71, 0x2C73], [0xC0, 0xD6], [0xD8, 0xEF], [0xF1, 0xF6], [0xF8, 0x130], [0x132, 0x236], [0x238, 0x24F], [0x1E02, 0x1E05], [0x1E0A, 0x1E0F], 0x1E12, 0x1E13, 0x1E1E, 0x1E1F, 0x1E24, 0x1E25, 0x1E2E, 0x1E2F, 0x1E36, 0x1E37, [0x1E3C, 0x1E41], [0x1E44, 0x1E47], [0x1E4A, 0x1E4D], [0x1E50, 0x1E57], 0x1E5A, 0x1E5B, [0x1E60, 0x1E63], [0x1E6A, 0x1E71], 0x1E78, 0x1E79, [0x1E80, 0x1E85], 0x1E92, 0x1E93, 0x1E9E, [0x1EA0, 0x1EF9]
                ]
            }],
        ['latin-m', {
                'monospace': [
                    [0xC0, 0xD6], [0xD8, 0xEF], [0xF1, 0xF6], [0xF8, 0x130], [0x132, 0x17E], 0x192, [0x1FC, 0x1FF], [0x218, 0x21B], [0x1E80, 0x1E85], 0x1EF2, 0x1EF3
                ]
            }],
        ['greek', {
                'normal': [
                    0x3F2, 0x3F3, [0x3F7, 0x3FF], [0x1F00, 0x1F15], [0x1F18, 0x1F1D], [0x1F20, 0x1F45], [0x1F48, 0x1F4D], [0x1F50, 0x1F57], 0x1F59, 0x1F5B, 0x1F5D, [0x1F5F, 0x1F7D], [0x1F80, 0x1FB4], [0x1FB6, 0x1FC4], [0x1FC6, 0x1FD3], [0x1FD6, 0x1FDB], [0x1FDD, 0x1FEF], [0x1FF2, 0x1FF4], [0x1FF6, 0x1FFE], [0x370, 0x377], [0x37A, 0x37F], [0x384, 0x38A], 0x38C, [0x38E, 0x390], [0x3AA, 0x3B0], [0x3CA, 0x3D0], 0x3D3, 0x3D4, [0x3D7, 0x3E1]
                ],
                'bold': [
                    0x3F2, 0x3F3, [0x3F7, 0x3FF], [0x1F00, 0x1F15], [0x1F18, 0x1F1D], [0x1F20, 0x1F45], [0x1F48, 0x1F4D], [0x1F50, 0x1F57], 0x1F59, 0x1F5B, 0x1F5D, [0x1F5F, 0x1F7D], [0x1F80, 0x1FB4], [0x1FB6, 0x1FC4], [0x1FC6, 0x1FD3], [0x1FD6, 0x1FDB], [0x1FDD, 0x1FEF], [0x1FF2, 0x1FF4], [0x1FF6, 0x1FFE], [0x370, 0x377], [0x37A, 0x37F], [0x384, 0x38A], 0x38C, [0x38E, 0x390], [0x3AA, 0x3B0], [0x3CA, 0x3D0], 0x3D3, 0x3D4, [0x3D7, 0x3DB], [0x3DE, 0x3E1]
                ],
                'italic': [
                    0x3F2, 0x3F3, [0x3F7, 0x3FF], [0x1F00, 0x1F15], [0x1F18, 0x1F1D], [0x1F20, 0x1F45], [0x1F48, 0x1F4D], [0x1F50, 0x1F57], 0x1F59, 0x1F5B, 0x1F5D, [0x1F5F, 0x1F7D], [0x1F80, 0x1FB4], [0x1FB6, 0x1FC4], [0x1FC6, 0x1FD3], [0x1FD6, 0x1FDB], [0x1FDD, 0x1FEF], [0x1FF2, 0x1FF4], [0x1FF6, 0x1FFE], [0x370, 0x377], [0x37A, 0x37F], [0x384, 0x38A], 0x38C, [0x38E, 0x390], [0x3AA, 0x3B0], [0x3CA, 0x3D0], 0x3D3, 0x3D4, [0x3D7, 0x3E1]
                ],
                'bold-italic': [
                    0x3F2, 0x3F3, [0x3F7, 0x3FF], [0x1F00, 0x1F15], [0x1F18, 0x1F1D], [0x1F20, 0x1F45], [0x1F48, 0x1F4D], [0x1F50, 0x1F57], 0x1F59, 0x1F5B, 0x1F5D, [0x1F5F, 0x1F7D], [0x1F80, 0x1FB4], [0x1FB6, 0x1FC4], [0x1FC6, 0x1FD3], [0x1FD6, 0x1FDB], [0x1FDD, 0x1FEF], [0x1FF2, 0x1FF4], [0x1FF6, 0x1FFE], [0x370, 0x377], [0x37A, 0x37F], [0x384, 0x38A], 0x38C, [0x38E, 0x390], [0x3AA, 0x3B0], [0x3CA, 0x3D0], 0x3D3, 0x3D4, [0x3D7, 0x3E1]
                ],
                'monospace': [
                    0x3F2, 0x3F3, [0x3F7, 0x3FF], [0x1F00, 0x1F15], [0x1F18, 0x1F1D], [0x1F20, 0x1F45], [0x1F48, 0x1F4D], [0x1F50, 0x1F57], 0x1F59, 0x1F5B, 0x1F5D, [0x1F5F, 0x1F7D], [0x1F80, 0x1FB4], [0x1FB6, 0x1FC4], [0x1FC6, 0x1FD3], [0x1FD6, 0x1FDB], [0x1FDD, 0x1FEF], [0x1FF2, 0x1FF4], [0x1FF6, 0x1FFE], [0x370, 0x377], [0x37A, 0x37F], [0x384, 0x38A], 0x38C, [0x38E, 0x390], [0x3AA, 0x3B0], [0x3CA, 0x3D0], 0x3D3, 0x3D4, [0x3D7, 0x3E1]
                ]
            }],
        ['cyrillic', {
                'normal': [
                    [0x400, 0x479], [0x48A, 0x52F]
                ],
                'bold': [
                    [0x400, 0x479], [0x48A, 0x52F]
                ],
                'italic': [
                    [0x400, 0x479], [0x48A, 0x52F]
                ],
                'bold-italic': [
                    [0x400, 0x479], [0x48A, 0x52F]
                ],
                'monospace': [
                    [0x400, 0x479], [0x48A, 0x52F]
                ]
            }],
        ['phonetics', {
                'normal': [
                    [0x250, 0x2AF], 0x1D4A, [0x1D6C, 0x1D76], 0x1D7B, 0x1D91, 0x1DBF
                ],
                'bold': [
                    [0x250, 0x2AF], 0x1D4A, [0x1D6C, 0x1D76], 0x1D7B, 0x1D91, 0x1DBF
                ],
                'italic': [
                    [0x250, 0x2AF], 0x1D4A, [0x1D6C, 0x1D76], 0x1D7B, 0x1D91, 0x1DBF
                ],
                'bold-italic': [
                    [0x250, 0x2AF], 0x1D4A, [0x1D6C, 0x1D76], 0x1D7B, 0x1D91, 0x1DBF
                ]
            }],
        ['double-struck', {
                'normal': [
                    0x1D538, 0x1D539, [0x1D53B, 0x1D53E], [0x1D540, 0x1D544], 0x1D546, [0x1D54A, 0x1D550], [0x1D552, 0x1D56B], 0x2102, 0x210D, 0x2115, 0x2119, 0x211A, 0x211D, 0x2124, 0x2140
                ]
            }, [0x2140]],
        ['fraktur', {
                'normal': [
                    0x1D504, 0x1D505, [0x1D507, 0x1D50A], [0x1D50D, 0x1D514], [0x1D516, 0x1D51C], [0x1D51E, 0x1D537], 0x210C, 0x2111, 0x211C, 0x2128, 0x212D
                ]
            }],
        ['script', {
                'normal': [
                    0x1D49C, 0x1D49E, 0x1D49F, 0x1D4A2, 0x1D4A5, 0x1D4A6, [0x1D4A9, 0x1D4AC], [0x1D4AE, 0x1D4B9], 0x1D4BB, [0x1D4BD, 0x1D4C3], [0x1D4C5, 0x1D4CF], 0x210A, 0x210B, 0x2110, 0x2112, 0x2113, 0x211B, 0x212C, [0x212F, 0x2131], 0x2133, 0x2134
                ]
            }],
        ['sans-serif', {
                'normal': [
                    [0x1D5A0, 0x1D66F], [0x1D7E2, 0x1D7F5]
                ]
            }],
        ['monospace', {
                'normal': [
                    [0x1D670, 0x1D6A3], [0x1D7F6, 0x1D7FF]
                ],
                'monospace': [
                    0x3F0, 0x3F1, 0x3F4, 0x3F5, [0x7B, 0x7E], 0xA0, 0xA8, 0xB0, 0xB4, 0x131, [0x20, 0x2F], 0x237, [0x3A, 0x40], 0x2C6, 0x2C7, 0x2C9, [0x2D8, 0x2DC], [0x300, 0x304], [0x306, 0x308], [0x30A, 0x30C], [0x2190, 0x2199], 0x220F, 0x2211, 0x2212, 0x2215, 0x2219, 0x221A, 0x221E, 0x2229, 0x222B, 0x2248, 0x2260, 0x2261, 0x2264, 0x2265, 0x5B, [0x391, 0x397], 0x5C, [0x398, 0x3A1], 0x5D, [0x3A3, 0x3A9], 0x5E, [0x3B1, 0x3B5], 0x5F, [0x3B6, 0x3BF], 0x60, [0x3C0, 0x3C7], 0x25CA, 0x3C8, 0x3C9, 0x3D1, 0x3D2, 0x3D5, 0x3D6
                ]
            }],
        ['calligraphic', {
                '-tex-calligraphic': [
                    [0x41, 0x5A]
                ],
                '-tex-bold-calligraphic': [
                    [0x41, 0x5A]
                ]
            }],
        ['symbols', {
                'normal': [
                    0x2BFE, 0xA1, 0xA2, 0xA4, 0xA6, [0xA9, 0xAB], 0xAD, 0xAE, 0xB2, 0xB3, [0xB9, 0xBF], 0xE3F, [0xE100, 0xE103], [0xFB00, 0xFB04], 0x200C, 0x200D, 0x201A, 0x201E, 0x2022, 0x2030, 0x2039, 0x203A, 0x203F, 0x204A, 0x2070, [0x2074, 0x208E], 0x20A1, 0x20A6, [0x20A9, 0x20AB], 0x20AF, 0x20B4, 0x20B9, 0x20BA, 0x20BD, 0x2116, 0x2122, 0x212E, [0x2153, 0x215F], 0x2302, [0x2326, 0x2328], 0x232B, [0x23FB, 0x23FE]
                ]
            }],
        ['symbols-other', {
                'bold': [
                    [0xA1, 0xA7], [0xA9, 0xAE], [0xB1, 0xB3], [0xB5, 0xB7], [0xB9, 0xBF], 0xD7, 0xF0, 0xF7, 0xE3F, [0xE100, 0xE103], [0xFB00, 0xFB04], 0x200C, 0x200D, 0x201A, 0x201E, [0x2020, 0x2022], 0x2030, 0x2039, 0x203A, 0x203F, 0x204A, 0x2070, [0x2074, 0x208E], 0x20A1, 0x20A6, [0x20A9, 0x20AB], 0x20AF, 0x20B4, 0x20B9, 0x20BA, 0x20BD, 0x2116, 0x2122, 0x212E, [0x2153, 0x215F]
                ],
                'italic': [
                    [0xA1, 0xA7], [0xA9, 0xAE], [0xB1, 0xB3], [0xB5, 0xB7], [0xB9, 0xBF], 0xD7, 0xF0, 0xF7, 0xE3F, [0xE100, 0xE103], [0xFB00, 0xFB04], 0x200C, 0x200D, 0x201A, 0x201E, [0x2020, 0x2022], 0x2030, 0x2039, 0x203A, 0x203F, 0x204A, 0x2070, [0x2074, 0x208E], 0x20A1, 0x20A6, [0x20A9, 0x20AB], 0x20AF, 0x20B4, 0x20B9, 0x20BA, 0x20BD, 0x2116, 0x2122, 0x212E, [0x2153, 0x215F]
                ],
                'bold-italic': [
                    [0xA1, 0xA7], [0xA9, 0xAE], [0xB1, 0xB3], [0xB5, 0xB7], [0xB9, 0xBF], 0xD7, 0xF0, 0xF7, 0xE3F, [0xE100, 0xE103], [0xFB00, 0xFB04], 0x200C, 0x200D, 0x201A, 0x201E, [0x2020, 0x2022], 0x2030, 0x2039, 0x203A, 0x203F, 0x204A, 0x2070, [0x2074, 0x208E], 0x20A1, 0x20A6, [0x20A9, 0x20AB], 0x20AF, 0x20B4, 0x20B9, 0x20BA, 0x20BD, 0x2116, 0x2122, 0x212E, [0x2153, 0x215F]
                ],
                'monospace': [
                    [0xA1, 0xA7], [0xA9, 0xAE], [0xB1, 0xB3], [0xB5, 0xB7], [0xB9, 0xBF], 0xD7, 0xF0, 0xF7, 0xFB01, 0xFB02, 0x2017, 0x201A, 0x201E, [0x2020, 0x2022], 0x2030, 0x2039, 0x203A, 0x204A, 0x2070, [0x2074, 0x208E], 0x20AF, 0x20B9, 0x20BA, 0x20BD, 0x2116, 0x2122, 0x212E, [0x2153, 0x215F]
                ]
            }],
        ['arrows', {
                'normal': [
                    0x27A1, [0x2900, 0x2909], [0x2912, 0x291C], 0x294C, 0x294D, 0x294F, 0x2951, 0x295C, 0x295D, 0x2960, 0x2961, [0x2B05, 0x2B07], 0x2B31, [0x2B34, 0x2B36], [0x2B39, 0x2B3D], 0x219C, 0x219D, 0x219F, 0x21A1, 0x21A5, 0x21A7, 0x21A8, 0x21AD, [0x21AF, 0x21B5], 0x21B8, 0x21B9, [0x21D6, 0x21D9], [0x21DC, 0x21DF], [0x21E6, 0x21F4], [0x21F7, 0x21FF], 0x23CE
                ]
            }, [0x21A5, 0x21A7, 0x2906, 0x2907, 0x294C, 0x294D, 0x294F, 0x2951, 0x295C, 0x295D, 0x2960, 0x2961]],
        ['up-int', {
                '-up': [
                    0x2A0C, [0x222B, 0x2230]
                ],
                '-dup': [
                    0x2A0C, [0x222B, 0x2230]
                ]
            }],
        ['accents', {
                'normal': [
                    0xB8, [0x2B0, 0x2B2], 0x2B4, [0x2B7, 0x2BC], 0x2BF, 0x2C0, 0x2C8, 0x2CC, [0x2CE, 0x2D1], 0x2D4, 0x2D6, 0x2D7, 0x2DB, 0x2DD, 0x2DE, [0x2E0, 0x2E9], 0x2EE, [0x1DC4, 0x1DC9], 0x309, 0x30B, 0x30D, 0x30F, [0x311, 0x313], [0x316, 0x321], [0x323, 0x32D], [0x32F, 0x332], [0x334, 0x337], [0x339, 0x33D], 0x342, 0x345, 0x20D3, [0x20E7, 0x20E9], 0x20F0, 0x35C, 0x361
                ]
            }, [0x332]],
        ['accents-other', {
                'bold': [
                    0xB8, [0x2B0, 0x2B2], 0x2B4, [0x2B7, 0x2BC], 0x2BF, 0x2C0, 0x2C8, 0x2CC, [0x2CE, 0x2D1], 0x2D4, 0x2D6, 0x2D7, 0x2DB, 0x2DD, 0x2DE, [0x2E0, 0x2E9], 0x2EE, [0x1DC4, 0x1DC9], 0x309, 0x30B, 0x30D, 0x30F, [0x311, 0x313], [0x316, 0x321], [0x323, 0x32D], [0x32F, 0x332], [0x334, 0x336], [0x339, 0x33D], 0x342, 0x345, 0x35C, 0x361
                ],
                'italic': [
                    0xB8, [0x2B0, 0x2B2], 0x2B4, [0x2B7, 0x2BC], 0x2BF, 0x2C0, 0x2C8, 0x2CC, [0x2CE, 0x2D1], 0x2D4, 0x2D6, 0x2D7, 0x2DB, 0x2DD, 0x2DE, [0x2E0, 0x2E9], 0x2EE, [0x1DC4, 0x1DC9], 0x309, 0x30B, 0x30D, 0x30F, [0x311, 0x313], [0x316, 0x321], [0x323, 0x32D], [0x32F, 0x332], [0x334, 0x336], [0x339, 0x33D], 0x342, 0x345, 0x35C, 0x361
                ],
                'bold-italic': [
                    0xB8, [0x2B0, 0x2B2], 0x2B4, [0x2B7, 0x2BC], 0x2BF, 0x2C0, 0x2C8, 0x2CC, [0x2CE, 0x2D1], 0x2D4, 0x2D6, 0x2D7, 0x2DB, 0x2DD, 0x2DE, [0x2E0, 0x2E9], 0x2EE, [0x1DC4, 0x1DC9], 0x309, 0x30B, 0x30D, 0x30F, [0x311, 0x313], [0x316, 0x321], [0x323, 0x32D], [0x32F, 0x332], [0x334, 0x336], [0x339, 0x33D], 0x342, 0x345, 0x35C, 0x361
                ],
                'monospace': [
                    0xB8, 0x2B9, 0x2BA, 0x2BC, 0x2DB, 0x2DD, 0x30B, 0x30F, 0x313, 0x314, 0x326, 0x327, 0x335, 0x336, 0x342, 0x345
                ]
            }],
        ['shapes', {
                'normal': [
                    0x27A1, 0x2B24, 0x2B58, 0x1F784, 0x2302, [0x2326, 0x2328], 0x232B, [0x23FB, 0x23FE], [0x2580, 0x2590], [0x2594, 0x259F], 0x25A2, 0x25A3, [0x25AC, 0x25AF], 0x25C9, 0x25CE, [0x25D0, 0x25D3], [0x25D5, 0x25D7], [0x25D9, 0x25E5], [0x25E7, 0x25EB], [0x25F0, 0x25F7], 0x2620, [0x2639, 0x263C], 0x2640, 0x2642, 0x2660, 0x2663, 0x2665, 0x2666, 0x266A, 0x266B, [0x26AA, 0x26AC]
                ],
                'bold': [
                    0x25AF
                ],
                'italic': [],
                'bold-italic': []
            }],
        ['math-other', {
                'bold': [
                    0x2981, [0x2190, 0x2199], 0x2205, 0x2206, 0x220F, 0x2211, 0x2212, 0x2215, 0x2219, 0x221A, 0x221E, 0x222B, 0x2248, 0x2260, 0x2264, 0x2265, 0x22C5, 0x25B2, 0x25B4, 0x25B6, 0x25B8, 0x25BA, 0x25BC, 0x25BE, 0x25C0, 0x25C2, 0x25C4, 0x25CA, 0x25CF
                ],
                'italic': [
                    [0x2190, 0x2199], 0x2205, 0x2206, 0x220F, 0x2211, 0x2212, 0x2215, 0x2219, 0x221A, 0x221E, 0x222B, 0x2248, 0x2260, 0x2264, 0x2265, 0x22C5, 0x25CA
                ],
                'bold-italic': [
                    [0x2190, 0x2199], 0x2205, 0x2206, 0x220F, 0x2211, 0x2212, 0x2215, 0x2219, 0x221A, 0x221E, 0x222B, 0x2248, 0x2260, 0x2264, 0x2265, 0x22C5, 0x25CA
                ]
            }],
        ['stretchy', {
                'normal': [
                    0x221B, 0x221C
                ],
                '-smallop': [
                    0x221B, 0x221C
                ],
                '-largeop': [
                    0x221B, 0x221C
                ],
                '-size3': [
                    0x221B, 0x221C
                ],
                '-size4': [
                    0x221B, 0x221C
                ],
                '-size5': [
                    0x221B, 0x221C
                ],
                '-size6': [
                    0x221B, 0x221C
                ],
                '-size7': [
                    0x221B, 0x221C
                ],
                '-size8': [
                    0x221B, 0x221C
                ],
                '-size9': [
                    0x221B, 0x221C
                ],
                '-size10': [
                    0x221B, 0x221C
                ],
                '-size11': [
                    0x221B, 0x221C
                ],
                '-size12': [
                    0x221B, 0x221C
                ],
                '-size13': [
                    0x221B, 0x221C
                ],
                '-size14': [
                    0x221B, 0x221C
                ],
                '-size15': [
                    0x221B, 0x221C
                ],
                '-lf-tp': [
                    0x221B, 0x221C
                ],
                '-rt-bt': [
                    0x221B, 0x221C
                ],
                '-ext': [
                    0x221B, 0x221C
                ]
            }, [0x221B, 0x221C]],
        ['variants', {
                '-tex-variant': [
                    0xAA, 0xB0, 0xB2, 0xB3, 0xB9, 0xBA, 0x22, 0x27, 0x2A, [0x30, 0x39], [0x200C, 0x200F], 0x2070, 0x2071, [0x2074, 0x208E], 0x60
                ]
            }]
    ]);
    MathJaxFiraFont.variantCacheIds = {
        'normal': 'N',
        'bold': 'B',
        'italic': 'I',
        'bold-italic': 'BI',
        'sans-serif-italic': 'SSI',
        'sans-serif-bold-italic': 'SSBI',
        'monospace': 'M',
        '-smallop': 'SO',
        '-largeop': 'LO',
        '-size3': 'S3',
        '-size4': 'S4',
        '-size5': 'S5',
        '-size6': 'S6',
        '-size7': 'S7',
        '-size8': 'S8',
        '-size9': 'S9',
        '-size10': 'S10',
        '-size11': 'S11',
        '-size12': 'S12',
        '-size13': 'S13',
        '-size14': 'S14',
        '-size15': 'S15',
        '-tex-variant': 'V',
        '-tex-mathit': 'MI',
        '-tex-oldstyle': 'OS',
        '-tex-bold-oldstyle': 'OB',
        '-tex-calligraphic': 'C',
        '-tex-bold-calligraphic': 'CB',
        '-lf-tp': 'LT',
        '-rt-bt': 'RB',
        '-ext': 'E',
        '-mid': 'Me',
        '-up': 'U',
        '-dup': 'D'
    };
    return MathJaxFiraFont;
}(Base));
exports.MathJaxFiraFont = MathJaxFiraFont;
//# sourceMappingURL=svg.js.map